#todo_gui.py

import tkinter as tk
from tkinter import messagebox
import pickle

class Task:
    def __init__(self, description):
        self.description = description
        self.completed = False

    def mark_completed(self):
        self.completed = True

    def __str__(self):
        status = "Done" if self.completed else "Not Done"
        return f"{self.description} - {status}"

class TodoApp:
    def __init__(self,root):
        self.root = root
        self.root.title("Django's todolist")

        self.tasks = self.load_tasks()

        self.task_frame = tk.Frame(self.root)
        self.task_frame.pack()

        self.task_listbox = tk.Listbox(self.task_frame, height=10, width=50)
        self.task_listbox.pack(side=tk.LEFT)

        self.scrollbar = tk.Scrollbar(self.task_frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.task_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.task_listbox.yview)

        self.entry = tk.Entry(self.root, width=50)
        self.entry.pack()

        self.add_button = tk.Button(self.root, text="Add Task", command=self.add_task)
        self.add_button.pack()

        self.complete_button = tk.Button(self.root, text="Complete Task", command=self.complete_task)
        self.complete_button.pack()

        self.save_button = tk.Button(self.root, text="Save Task", command=self.save_tasks)
        self.save_button.pack()

        self.refresh_tasks()

    def add_task(self):
        description = self.entry.get()
        if description:
            self.tasks.append(Task(description))
            self.entry.delete(0, tk.END)
            self.refresh_tasks()

    def complete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            task_index = selected_task_index[0]
            self.tasks[task_index].mark_completed()
            self.refresh_tasks()
        else:
            messagebox.showwarning("Complete Task", "No task selected!")

    def save_tasks(self):
        with open("tasks.pkl", "wb") as file:
            pickle.dump(self.tasks, file)
            messagebox.showinfo("Save Tasks", "Tasks saved successfully")

    def load_tasks(self):
        try:
            with open("tasks.pkl","rb") as file:
                return pickle.load(file)
        except FileNotFoundError:
                return[]
            
    def refresh_tasks(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            self.task_listbox.insert(tk.END, str(task))

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()

